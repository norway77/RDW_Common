package org.opentestsystem.rdw.script.impl;

import org.apache.commons.io.IOUtils;

import org.opentestsystem.rdw.script.ScriptSource;
import org.opentestsystem.rdw.script.PipelineScriptDefinition;
import org.opentestsystem.rdw.script.PipelineScriptType;

import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.opentestsystem.rdw.script.PipelineScriptType.Base;
import static org.opentestsystem.rdw.script.PipelineScriptType.User;

/**
 * Implements the ScriptSource to load system scripts from resources, that is, from the classpath.
 * <p>
 * Base script should be in /scripts/DSLScriptBase.groovy
 * Pre-processing script should be in /scripts/pipelines/[code]/pre-process.groovy
 * Post-processing script should be in /scripts/pipelines/[code]/post-process.groovy
 * <p>
 * ([code] is the code name of the pipeline: exam, assessment, or group.
 */
public class ResourceLoaderScriptSource implements ScriptSource {

    private static String toSystemScriptPath(final String code, final PipelineScriptType type) {
        if (type == User) {
            throw new IllegalArgumentException("Cannot load user scripts from resources");
        }
        if (type == Base) {
            return "/DSLScriptBase.groovy";
        }
        return String.format("/scripts/pipelines/%s/%s-process.groovy", code, type.name().toLowerCase());
    }

    @Override
    public Optional<PipelineScriptDefinition> getScript(final PipelineScriptType type, final String pipelineCode) {
        return getResourceAsString(toSystemScriptPath(pipelineCode, type))
                .map(sourceCode -> PipelineScriptDefinition.builder()
                        .type(type)
                        .body(sourceCode)
                        .build()
                );
    }

    private Optional<String> getResourceAsString(final String resourcePath) {
        final InputStream inputStream = getClass().getResourceAsStream(resourcePath);
        if (inputStream == null) {
            return Optional.empty();
        }
        try {
            return Optional.ofNullable(
                    IOUtils.toString(inputStream, UTF_8)
            );
        } catch (final IOException exception) {
            throw new RuntimeException("Failed to read script", exception);
        }
    }
}
