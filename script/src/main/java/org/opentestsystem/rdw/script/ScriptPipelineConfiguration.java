package org.opentestsystem.rdw.script;

import groovy.lang.GroovyClassLoader;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.script.impl.DefaultConfigurationCompiler;
import org.opentestsystem.rdw.script.impl.DefaultPipelineFactory;
import org.opentestsystem.rdw.script.impl.EmptyPropertyResolver;
import org.opentestsystem.rdw.script.impl.ResourceLoaderScriptSource;
import org.opentestsystem.rdw.script.publishing.ArchiveBackedPublishedPipelineRepository;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.opentestsystem.rdw.script.security.DefaultSandboxPermissions;
import org.opentestsystem.rdw.script.security.DefaultSandboxSecurityManager;
import org.opentestsystem.rdw.script.security.SandboxPermissions;
import org.opentestsystem.rdw.script.security.SandboxSecurityManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * This is the configuration for the script pipeline infrastructure
 * Import this in an application context to compile, run, test and publish pipeline scripts
 *
 * IMPORTANT:
 * <p>
 *     Please declare an {@link ArchiveService} bean in conjunction with importing
 *     this configuration as it depends on an archive service to operate
 *
 * @see PipelineFactory
 * @see ScriptCompiler
 * @see GroovyClassLoader
 */
@Configuration
public class ScriptPipelineConfiguration {

    @Bean
    public ScriptSource scriptSource() {
        return new ResourceLoaderScriptSource();
    }

    @Bean
    public ConfigurationCompiler configurationCompiler() {
        return new DefaultConfigurationCompiler();
    }

    @Bean
    public PropertyResolver propertyResolver() {
        return new EmptyPropertyResolver();
    }

    @Bean
    public SandboxPermissions sandboxPermissions() {
        return new DefaultSandboxPermissions();
    }

    @Bean
    public SandboxSecurityManager sandboxSecurityManager(final SandboxPermissions permissions) {
        return new DefaultSandboxSecurityManager(permissions);
    }

    @Bean
    public PublishedPipelineRepository publishedPipelineRepository(final ArchiveService archiveService) {
        return new ArchiveBackedPublishedPipelineRepository(archiveService);
    }

    @Bean
    public PipelineFactory pipelineFactory(
            final PublishedPipelineRepository repository,
            final ConfigurationCompiler configurationCompiler,
            final PropertyResolver propertyResolver,
            final SandboxSecurityManager sandboxSecurityManager,
            final ScriptSource scriptSource) {

        return new DefaultPipelineFactory(
                repository,
                configurationCompiler,
                propertyResolver,
                sandboxSecurityManager,
                scriptSource
        );
    }

}
