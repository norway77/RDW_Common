package org.opentestsystem.rdw.script.security;

import java.security.Permission;

/**
 * Security manager that be enabled or disabled by thread to either check permission against a given set of sandbox
 * permissions or not check them at all, which would be the default if no security manager is set on the system.
 * This is more performant than assigning AllPermissions to the application domain and sandbox permissions
 * to the untrusted domain because there is a big performance penalty for checking permissions at all.
 */
public class DefaultSandboxSecurityManager extends SandboxSecurityManager {

    // Permission needed to disable the security manager.
    private static final DisableSecurityManagerPermission DISABLE_PERMISSION = new DisableSecurityManagerPermission();

    private final SandboxPermissions sandboxPermissions;
    private final InheritableThreadLocal<Boolean> enabledFlag;

    /**
     * Creates a DefaultSandboxSecurityManager with the given SandboxPermissions to use when enabled. For it to take effect,
     * it must be assigned as the System security manager:
     *
     * <pre>System.setSecurityManager(new DefaultSandboxSecurityManager(...));</pre>
     *
     * @param sandboxPermissions implementation of sandbox permissions.
     */
    public DefaultSandboxSecurityManager(final SandboxPermissions sandboxPermissions) {
        this.sandboxPermissions = sandboxPermissions;

        this.enabledFlag = new InheritableThreadLocal<Boolean>() {

            @Override
            protected Boolean initialValue() {
                return false;
            }

            @Override
            public void set(Boolean value) {
                if (value == null) {
                    return;
                }

                SecurityManager securityManager = System.getSecurityManager();

                // Always OK to enable, but check for permission to disable.
                if (value.equals(Boolean.FALSE) && securityManager != null) {
                    securityManager.checkPermission(DISABLE_PERMISSION);
                }
                super.set(value);
            }
        };
    }

    @Override
    public void checkPermission(Permission permission) {
        if (isEnabled()) {
            if (sandboxPermissions == null) {
                super.checkPermission(permission);
            } else {
                sandboxPermissions.checkPermission(permission);
            }
        }
    }

    @Override
    public void checkPermission(Permission permission, Object context) {
        checkPermission(permission);
    }

    public void enable() {
        enabledFlag.set(true);
    }

    @SuppressWarnings("unused")
    public void disable() {
        enabledFlag.set(false);
    }

    public boolean isEnabled() {
        return enabledFlag.get();
    }
}
