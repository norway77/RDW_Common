package org.opentestsystem.rdw.script;

import groovy.lang.Script;

import java.util.Map;

/**
 * Base class for pipeline scripts. Implementation will be loaded from Groovy script file.
 */
public abstract class PipelineScript extends Script {

    private PipelineScriptDefinition source;

    public PipelineScriptDefinition getSource() {
        return source;
    }

    public PipelineScript source(final PipelineScriptDefinition source) {
        this.source = source;
        return this;
    }

    /**
     * Binds properties that will be available to script.
     *
     * @param properties a map of named properties. For this map, the keys are Strings, which the script
     *                   will be able to use as implicit variable names, and the values are the objects
     *                   that will be assigned to these implicit variables.
     * @return this object (used for chaining calls)
     */
    public PipelineScript bindProperties(Map<String, Object> properties) {
        if (properties != null) {
            for (Map.Entry<String, Object> entry : properties.entrySet()) {
                this.setProperty(entry.getKey(), entry.getValue());
            }
        }
        return this;
    }

    /**
     * Binds the input that the script will work on.
     *
     * @param input the input for the script. The type of this input should match with what the script is expecting.
     * @return this object (used for chaining calls)
     */
    public PipelineScript bindInput(final Object input) {
        setProperty("input", input);
        return this;
    }

    /**
     * Wrapper for the Script.run() method, which catches any exceptions thrown by the script and
     * wraps them in a ScriptRuntimeException. This eases error handling and reporting.
     *
     * @return the output of the script
     * @throws ScriptRuntimeException if an error occurred during the script run.
     */
    public Object execute() throws ScriptRuntimeException {
        try {
            return this.run();
        } catch (final Exception exception) {
            throw new ScriptRuntimeException(exception);
        }
    }
}
