package org.opentestsystem.rdw.script;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.script.PipelineScriptType.User;
import static org.opentestsystem.rdw.script.util.Tests.resourceAsString;
import static org.opentestsystem.rdw.script.util.Tests.scriptCompilerWithBaseScript;

/**
 * somewhat of an integration test as it depends on {@link ScriptCompiler}
 */
@RunWith(MockitoJUnitRunner.class)
public class DSLScriptBaseIT {

    private static final PipelineScriptDefinition userScriptDefinition = PipelineScriptDefinition.builder()
            .type(User)
            .build();
    private static final PipelineDefinition emptyPipelineDefinition = PipelineDefinition.builder().build();
    private static final ScriptCompiler scriptCompiler = scriptCompilerWithBaseScript();

    @Mock
    private PropertyResolver propertyResolver;


    @Test(expected = ScriptRuntimeException.class)
    public void itShouldThrowExceptionForMissingProperty() throws Exception {
        final PipelineScript script = scriptCompiler
                .compile("return unknown.equals('value')")
                .getConstructor()
                .newInstance();

        script.source(userScriptDefinition);

        final Pipeline pipeline = new Pipeline(
                emptyPipelineDefinition,
                newArrayList(script),
                null
        );

        pipeline.run("in");
    }

    @Test
    public void itShouldNotThrowExceptionForExistingProperty() throws Exception {
        final PipelineScript script = scriptCompiler
                .compile("return known.equals('value')")
                .getConstructor()
                .newInstance();

        script.source(userScriptDefinition);

        final Pipeline pipeline = new Pipeline(
                emptyPipelineDefinition,
                newArrayList(script),
                null
        );

        when(propertyResolver.resolveProperty("known")).thenReturn("value");
        script.setProperty("propertyResolver", propertyResolver);
        final PipelineResults results = pipeline.run("in");
        assertThat(results.asString()).isEqualTo(Boolean.TRUE.toString());
    }

}
