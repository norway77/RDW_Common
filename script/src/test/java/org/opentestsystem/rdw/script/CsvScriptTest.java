package org.opentestsystem.rdw.script;

import org.junit.BeforeClass;
import org.junit.Test;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.apache.commons.lang3.StringUtils.countMatches;
import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.opentestsystem.rdw.script.util.Tests.resourceAsString;

public class CsvScriptTest {
    private static ScriptCompiler compiler;
    private static String csv;

    @BeforeClass
    public static void setUp() throws Exception {
        compiler = ScriptCompilers.toScriptCompiler(resourceAsString("/DSLScriptBase.groovy"));
        csv = resourceAsString("/sample_csv/IAB_ICA_Combined.items.csv");
    }

    @Test
    public void itShouldDoBasicTransformation() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "transformRows {row ->\n" +
                "   row.AssessmentType = row.AssessmentType.toUpperCase()\n" +
                "}\n" +
                "outputCsv";

        assertThat(csv).contains("interim");
        assertThat(csv).doesNotContain("INTERIM");

        final String results = (String)runScript(scriptCode, csv);

        assertThat(results).contains("INTERIM");
        assertThat(results).doesNotContain("interim");
    }

    @Test
    public void itShouldHandleConditionalLogic() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "transformRows {row ->\n" +
                "   if (row.ItemType == 'HTQ') {\n" +
                "      row.ItemType = 'XYZ'\n" +
                "   }\n" +
                "}\n" +
                "outputCsv";

        final int matchCount = countMatches(csv, "HTQ");

        assertThat(matchCount).isNotZero();
        assertThat(countMatches(csv, "XYZ")).isZero();

        final String results = (String)runScript(scriptCode, csv);

        assertThat(countMatches(results, "HTQ")).isZero();
        assertThat(countMatches(results, "XYZ")).isEqualTo(matchCount);
    }

    @Test
    public void itShouldDeleteRows() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "transformRows {row ->\n" +
                "   if (row.ItemType == 'HTQ') {\n" +
                "      row.delete()\n" +
                "   }\n" +
                "}\n" +
                "outputCsv";

        assertThat(countMatches(csv, "HTQ")).isNotZero();

        final String results = (String)runScript(scriptCode, csv);

        assertThat(countMatches(results, "HTQ")).isZero();
    }

    @Test
    public void itShouldNotModifyInputWhenNoTransform() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "outputCsv";

        Object results = runScript(scriptCode, csv);
        assertThat(results == csv).isTrue();
    }

    @Test
    public void itShouldHandleByteArray() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "transformRows {row ->\n" +
                "   row.AssessmentType = row.AssessmentType.toUpperCase()\n" +
                "}\n" +
                "outputCsv";

        assertThat(csv).contains("interim");
        assertThat(csv).doesNotContain("INTERIM");

        final String results = (String)runScript(scriptCode, csv.getBytes(UTF_8));

        assertThat(results).contains("INTERIM");
        assertThat(results).doesNotContain("interim");

    }

    @Test(expected = ScriptRuntimeException.class)
    public void itShouldErrorOnBadGet() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "transformRows {row ->\n" +
                "   def value = row.bogus\n" +
                "}\n" +
                "outputCsv";

        runScript(scriptCode, csv);
    }

    @Test(expected = ScriptRuntimeException.class)
    public void itShouldErrorOnBadSet() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "transformRows {row ->\n" +
                "   row.bogus = 'any value'\n" +
                "}\n" +
                "outputCsv";

        runScript(scriptCode, csv);
    }

    @Test(expected = ScriptRuntimeException.class)
    public void itShouldErrorOnIncompatibleExtensions() throws Exception {
        final String scriptCode = "enable('csv')\n" +
                "enable('xml')\n" +
                "outputCsv";

        runScript(scriptCode, csv);
    }

    private Object runScript(final String scriptCode, final Object input) throws Exception {
        final Class<? extends PipelineScript> scriptClass = compiler.compile(scriptCode);
        return scriptClass.newInstance().bindInput(input).execute();
    }
}
