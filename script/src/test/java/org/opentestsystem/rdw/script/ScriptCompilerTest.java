package org.opentestsystem.rdw.script;

import groovy.lang.GroovyRuntimeException;
import org.codehaus.groovy.control.CompilationFailedException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.opentestsystem.rdw.script.util.Tests.scriptCompilerWithBaseScript;


@RunWith(MockitoJUnitRunner.class)
public class ScriptCompilerTest {

    private ScriptCompiler compiler;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void before() {
        compiler = scriptCompilerWithBaseScript();
    }

    @Test
    public void itShouldCompileTheScript() {
        compiler.compile("return 1");
    }

    @Test
    public void itShouldCompileIntoRunnableCode() throws Exception {
        final Class<? extends PipelineScript> scriptClass = compiler.compile("return 'Hello'");

        assertThat(scriptClass.getConstructor().newInstance().execute(), is("Hello"));
    }

    @Test
    public void itShouldReportCompilerError() {
        exception.expect(CompilationFailedException.class);
        exception.expectMessage(containsString("expecting '''"));

        compiler.compile("return 'Unterminated string");
    }

    @Test
    public void itShouldReportBasicRuntimeExceptions() throws Exception {
        exception.expect(ScriptRuntimeException.class);

        final Class<? extends PipelineScript> scriptClass = compiler.compile("return 1 / 0", "1.groovy");
        scriptClass.getConstructor().newInstance().execute();
    }

    @Test
    public void itShouldReportGroovyRuntimeExceptions() throws Exception {
        exception.expect(ScriptRuntimeException.class);
        exception.expectCause(instanceOf(GroovyRuntimeException.class));

        Class<? extends PipelineScript> scriptClass = compiler.compile("return bogusMethod()");
        scriptClass.getConstructor().newInstance().execute();
    }

    @Test
    public void itShouldBeAbleEnableXmlExtensions() throws Exception {
        final Class<? extends PipelineScript> scriptClass = compiler.compile("enable 'xml'; outputXml");
        final String sampleXml = "<sample><field>1</field></sample>";
        scriptClass.newInstance().bindInput(sampleXml).execute();
    }

    @Test
    public void itShouldFailToEnableOtherExtensions() throws Exception {
        exception.expect(ScriptRuntimeException.class);
        exception.expectMessage(containsString("bogus type"));

        final Class<? extends PipelineScript> scriptClass = compiler.compile("enable 'bogus type'; return 'hello'");
        scriptClass.newInstance().execute();
    }

    @Test
    public void itShouldReportLineNumberForRuntimeExceptions() throws Exception {
        exception.expect(ScriptRuntimeException.class);
        exception.expectMessage(containsString("line 5"));

        final String badScript =
                "def a = 1\n" +
                        "def b = 2\n" +
                        "def c = 3\n" +
                        "def d = 4\n" +
                        "bogusMethod()\n" +
                        "def e = a / 0\n" +
                        "return e";

        final Class<? extends PipelineScript> scriptClass = compiler.compile(badScript);
        scriptClass.newInstance().execute();
    }
}

