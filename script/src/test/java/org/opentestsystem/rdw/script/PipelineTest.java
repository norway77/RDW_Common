package org.opentestsystem.rdw.script;

import org.junit.Test;
import org.opentestsystem.rdw.script.security.DefaultSandboxPermissions;
import org.opentestsystem.rdw.script.security.DefaultSandboxSecurityManager;
import org.opentestsystem.rdw.script.security.SandboxSecurityManager;

import java.util.Collections;
import java.util.function.Supplier;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.script.PipelineScriptType.Post;
import static org.opentestsystem.rdw.script.PipelineScriptType.Pre;
import static org.opentestsystem.rdw.script.PipelineScriptType.User;

public class PipelineTest {


    public static final PipelineScript pipelineScript(final PipelineScriptType type) {
        return pipelineScript(type, null);
    }
    public static final <T> PipelineScript pipelineScript(final PipelineScriptType type, final T output) {
        return pipelineScript(type, () -> output);
    }
    public static final <T> PipelineScript pipelineScript(final PipelineScriptType type, final Supplier<T> output) {
        return new PipelineScript() {
            @Override
            public PipelineScriptDefinition getSource() {
                return PipelineScriptDefinition.builder()
                        .type(type)
                        .build();
            }

            @Override
            public Object run() {
                return output.get();
            }
        };
    }

    // TODO would like to mock this but it causes a stack overflow
    // also using the default security security manager causes exceptions to be thrown as it defaults to not being permissive
    private static final SandboxSecurityManager securityManager = new DefaultSandboxSecurityManager(new DefaultSandboxPermissions());
    private static final PipelineScriptDefinition userScript = PipelineScriptDefinition.builder()
            .type(User)
            .build();
    private static final PipelineDefinition pipelineWithoutUserScript = PipelineDefinition.builder().build();
    private static final PipelineDefinition pipelineWithUserScript = PipelineDefinition.builder()
            .scripts(newArrayList(
                    userScript
            ))
            .build();

    @Test(expected = NullPointerException.class)
    public void constructorShouldThrowExceptionWhenScriptsAreNull() {
        new Pipeline(
                pipelineWithoutUserScript,
                null,
                securityManager
        );
    }

    @Test
    public synchronized void constructorShouldSetSecurityManagerWhenUserScriptsArePresent() {
        System.setSecurityManager(null);
        new Pipeline(
                pipelineWithUserScript,
                newArrayList(
                        pipelineScript(User)
                ),
                securityManager
        );
        assertThat(System.getSecurityManager()).isEqualTo(securityManager);
    }

    @Test
    public synchronized void constructorShouldNotSetSecurityManagerWhenUserScriptsAreAbsent() {
        System.setSecurityManager(null);
        new Pipeline(
                pipelineWithUserScript,
                newArrayList(
                        pipelineScript(Pre),
                        pipelineScript(Post)
                ),
                securityManager
        );
        assertThat(System.getSecurityManager()).isNotEqualTo(securityManager);
    }

    @Test
    public void runShouldDoNothingWhenThereAreNoScripts() {
        final String input = "input";
        final Pipeline pipeline = new Pipeline(
                pipelineWithUserScript,
                Collections.emptyList(),
                securityManager
        );
        assertThat(pipeline.run(input))
                .isEqualToComparingFieldByFieldRecursively(
                        new PipelineResults(
                                input,
                                false
                        )
                );
    }

    @Test
    public void runShouldTransformTheInputUsingTheUserScript() {
        final String input = "input";
        final String expectedOutput = "changed";
        final Pipeline pipeline = new Pipeline(
                pipelineWithUserScript,
                newArrayList(
                        pipelineScript(User, expectedOutput)
                ),
                securityManager
        );

        assertThat(pipeline.run(input))
                .isEqualToComparingFieldByFieldRecursively(
                        new PipelineResults(
                                expectedOutput,
                                true
                        )
                );
    }

    @Test
    public void runShouldReturnTheLastTransformation() {
        final String input = "input";
        final String expectedOutput = "changed";
        final Pipeline pipeline = new Pipeline(
                pipelineWithUserScript,
                newArrayList(
                        pipelineScript(User, "nope"),
                        pipelineScript(Pre, "not me"),
                        pipelineScript(Post, expectedOutput)
                ),
                securityManager
        );

        assertThat(pipeline.run(input))
                .isEqualToComparingFieldByFieldRecursively(
                        new PipelineResults(
                                expectedOutput,
                                true
                        )
                );
    }

    @Test(expected = RuntimeException.class)
    public void runShouldThrowExceptionWhenOutputIsNull() {
        final Pipeline pipeline = new Pipeline(
                pipelineWithUserScript,
                newArrayList(
                        pipelineScript(User, null)
                ),
                securityManager
        );

        pipeline.run("input");
    }

    @Test(expected = RuntimeException.class)
    public void runShouldThrowExceptionWhenScriptThrowsRuntimeError() {
        final Pipeline pipeline = new Pipeline(
                pipelineWithUserScript,
                newArrayList(
                        pipelineScript(User, () -> {
                            throw new RuntimeException("boom");
                        })
                ),
                securityManager
        );

        pipeline.run("input");
    }

}
