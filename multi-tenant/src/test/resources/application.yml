#not actually testing database access using for testing org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant
logging:
  level:
    org:
      springframework: DEBUG

spring:
  datasource:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${spring.datasource.url-server:localhost:3306}"
      database: "${spring.datasource.url-schema:reporting}"
      properties: "useSSL=${spring.datasource.use-ssl:false}\
                   &useLegacyDatetimeCode=${spring.datasource.use-legacy-datetime-code:false}\
                   &characterEncoding=${spring.datasource.character-encoding:utf8}\
                   &rewriteBatchedStatements=${spring.datasource.rewrite-batched-statements:true}\
                   &connectTimeout=${spring.datasource.connect-timeout:10000}\
                   &socketTimeout=${spring.datasource.socket-timeout:40000}\
                   "
    url: "${spring.datasource.url-parts.protocol}//${spring.datasource.url-parts.hosts}/${spring.datasource.url-parts.database}?${spring.datasource.url-parts.properties}"
    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${spring.datasource.query-timeout:30})"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationQueryTimeout: 10000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${spring.datasource.initialSize}
    maxIdle: ${spring.datasource.maxActive}

archive:
  file:
    root: file:///tmp/
  aws:
    access-key: bar
    secret-key: baz
    region: foo1
    sse: bar2
    bucket: s3://mybucket
    object-prefix:
  tenants:
    ca:
      aws:
        bucket: s3://new-bucket
        object-prefix: {$tenant.aws.object.object-prefix}
