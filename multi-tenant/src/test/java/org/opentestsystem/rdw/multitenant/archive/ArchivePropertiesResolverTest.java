package org.opentestsystem.rdw.multitenant.archive;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.archive.ArchiveAwsProperties;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.archive.ArchivePropertiesImpl;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.Optional;


@RunWith(SpringRunner.class)
@TestPropertySource(properties = {
        "test-archive.aws.bucket=s3://rdw-ci-archive",
        "test-archive.aws.region: us-west-2",
        "test-archive.aws.access-key:",
        "test-archive.aws.secret-key:",
        "test-archive.aws.sse:",
        "test-archive.aws.object-prefix:",
        //"test-archive.root=s3://rdw-ci-archive",
       // "test-archive.cloud.aws.region.static: us-west-2"
})
@Import(value = {ArchivePropertiesResolver.class})
public class ArchivePropertiesResolverTest {
    @Autowired
    TenantIdResolver tenantIdResolver;

    ArchiveProperties archiveProperties;

    @Test
    public void TestArchivePropertiesResolverTest() {

        archiveProperties = getS3ArchiveProperties();
        ArchivePropertiesResolver archivePropertiesResolver = new ArchivePropertiesResolver(tenantIdResolver, archiveProperties);
        Optional<ArchivePropertiesTenant> resolvedArchivePropertiesTenant = archivePropertiesResolver.getResolvedArchivePropertiesTenant();
        assertThat(resolvedArchivePropertiesTenant.isPresent()).isTrue();
        assertThat(resolvedArchivePropertiesTenant.get().getArchiveAwsProperties().getBucket().equals(archiveProperties.getArchiveAwsProperties().getBucket()));
    }

    private final String accessKeyTest = "accessKeyTest";
    private final String secretKey = "secretKey";
    private final String region = "us-west-2";
    private final String objectPrefix ="";
    private final String s3Bucket = "s3://bucket";
    private final String sse = "AES256";


    public ArchivePropertiesImpl getS3ArchiveProperties() {
        return new ArchivePropertiesImpl(null, getAwsArchiveProperties());
    }
    // creates with default null tenant.
    public ArchiveAwsProperties getAwsArchiveProperties() {

        ArchiveAwsProperties archiveAwsProperties = new ArchiveAwsProperties();
        archiveAwsProperties.setAccessKey(accessKeyTest);
        archiveAwsProperties.setBucket(s3Bucket);
        archiveAwsProperties.setObjectPrefix(objectPrefix);
        archiveAwsProperties.setRegion(region);
        archiveAwsProperties.setSecretKey(secretKey);
        archiveAwsProperties.setSse(sse);
        return archiveAwsProperties;
    }


}