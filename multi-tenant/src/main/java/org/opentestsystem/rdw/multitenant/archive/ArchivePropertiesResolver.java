package org.opentestsystem.rdw.multitenant.archive;


import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.internal.StaticCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.PropertyResolver;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Component
@Configuration
public class ArchivePropertiesResolver {

    private static final Logger logger = LoggerFactory.getLogger(ArchivePropertiesResolver.class);
    private final TenantIdResolver tenantIdResolver;
    private final ArchiveProperties archiveProperties;
    Map<String,ArchivePropertiesTenant> tenants = new HashMap<>();


    ArchivePropertiesResolver(TenantIdResolver tenantIdResolver, ArchiveProperties archiveProperties) {
        this.tenantIdResolver = tenantIdResolver;
        this.archiveProperties = archiveProperties;
    }

    public Optional<ArchivePropertiesTenant> getResolvedArchivePropertiesTenant() {
        Optional<String> tenantId = tenantIdResolver.getTenantId();
        if(!tenantId.isPresent()) {
            logger.warn("No tenantId Found. Will fall back to default archive properties.");
            return Optional.empty();
        }
        Optional<ArchivePropertiesTenant> archivePropertiesTenant = Optional.ofNullable(tenants.get(tenantId.get()));
        return archivePropertiesTenant;
    }


}
