package org.opentestsystem.rdw.multitenant.storage;

import org.opentestsystem.rdw.multitenant.TenantIdResolver;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static org.opentestsystem.rdw.multitenant.TenantContextHolder.DEFAULT_TENANT_ID;

public class TenantPathDefaultResolver implements TenantPathResolver, TenantIdResolver {

    // todo replace with real lookup
    Map<String, TenantPathOverride> tenantMap = new HashMap<>();
    public TenantPathDefaultResolver() {
        populateTenantMap();
    }

    // Return the full path with tenant information
    public String getRootPath() {
        return getRootPath(getTenantId());
    }

    public String getRootPath(Optional<String> id) {
        // todo validate id
        final TenantPathOverride tenantPathOverride = tenantMap.get(id.get());
        return tenantPathOverride.getRoot() + tenantPathOverride.getPrefix();
    }

    // Return the tenant prefix for an object
    public String getPrefix() {
        return getPrefix(getTenantId());
    }

    public String getPrefix(Optional<String> id) {
        // todo validate id
        final TenantPathOverride tenantPathOverride = tenantMap.get(id.get());
        return tenantPathOverride.getPrefix();
    }

    @Override
    public TenantPathOverride getTenantPathOverride() {
        // todo validate id
        final TenantPathOverride tenantPathOverride = tenantMap.get(getTenantId());
        return tenantPathOverride;
    }

    @Override
    public Optional<String> getTenantId() {
        return Optional.of(DEFAULT_TENANT_ID);
    }

    // todo replace with real lookup
    private void populateTenantMap() {
        tenantMap.put(DEFAULT_TENANT_ID, new TenantPathOverride("bucket", ""));
        tenantMap.put("2", new TenantPathOverride("bucket", "WAS") );
        tenantMap.put("3",new TenantPathOverride("bucket", "NEV"));
    }
}
