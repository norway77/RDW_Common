package org.opentestsystem.rdw.archive;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.internal.StaticCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.core.env.PropertyResolver;

/**
 * Spring configuration for archive service. To use do something like:<pre>
 * {@literal @}Import(ArchiveConfiguration.class)
 *  public class Application {
 *      {@literal @}Autowired private ArchiveServiceFactory factory;
 *      {@literal @}Autowired private Environment env;
 *      private ArchiveService archiveService;
 *
 *      void init() {
 *          archiveService = factory.createArchiveService(env, "my-archive");
 *      }
 *  }
 * </pre>
 * With an application.yml that contains something like:<pre>
 * my-archive:
 *   root: s3://MyBucket
 *   cloud:
 *     aws:
 *       region:
 *         auto: false
 *         static: us-west-2
 *       credentials:
 *         accessKey: MyAccessKey
 *         secretKey: MySecretKey
 * </pre>
 * Note that it is the factory that is autowired, not the archive service itself. That is
 * just a necessary evil because of the dynamic nature of property parsing.
 * <p>
 * I don't think any of this precludes or interferes with the use of
 * ContextCredentialsAutoConfiguration.class and ContextResourceLoaderConfiguration.class
 * to get spring auto configured AmazonS3 clients.
 * </p>
 *
 * @see ArchiveServiceFactory
 * @see ArchiveService
 * @see LocalArchiveService
 * @see S3ArchiveService
 */
@Configuration
public class ArchiveConfiguration {

    @Bean
    public ArchiveServiceFactory archiveServiceFactory() {
        return (propertyResolver, prefix) -> {
            // use a relaxed property resolver to support Spring-like tolerance for camelCase, kabob-case, etc.
            // (using RelaxedDataBinder with configuration pojo might be less fragile)
            final String pre = prefix == null ? "" : prefix.endsWith(".") ? prefix : (prefix + ".");
            PropertyResolver resolver = new RelaxedPropertyResolver(propertyResolver, pre);
            final String root = resolver.getRequiredProperty("root");
            if (LocalArchiveService.validRoot(root)) {
                return localArchiveService(root);
            }
            if (S3ArchiveService.validRoot(root)) {
                final AmazonS3ClientBuilder builder = AmazonS3ClientBuilder.standard();
                resolver = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.credentials.");
                builder.setCredentials(new StaticCredentialsProvider(new BasicAWSCredentials(
                        resolver.getRequiredProperty("access-key"),
                        resolver.getRequiredProperty("secret-key"))));
                // TODO - allow cloud.aws.region.auto to be true?
                resolver = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.region.");
                builder.setRegion(resolver.getRequiredProperty("static"));
                final String sse = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.").getProperty("sse");
                return s3ArchiveService(builder.build(), root, sse);
            }
            throw new IllegalArgumentException("Invalid archive root " + root);
        };
    }

    @Bean
    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public S3ArchiveService s3ArchiveService(final AmazonS3 amazonS3, final String archiveRoot, final String sse) {
        return new S3ArchiveService(amazonS3, archiveRoot, sse);
    }

    @Bean
    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public LocalArchiveService localArchiveService(final String archiveRoot) {
        return new LocalArchiveService(archiveRoot);
    }
}
