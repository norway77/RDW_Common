package org.opentestsystem.rdw.archive;

import java.io.InputStream;
import java.util.Properties;

/**
 * A service for reading and writing resources in an archive.
 */
public interface ArchiveService {

    /**
     * A value with this key will be added to the properties identifying the underlying raw URI for an item.
     * It will include the storage protocol, e.g. "file:///tmp/A3/45/A345ED89".
     * This is a semi-opaque way of providing a piece of data that should never be used.
     */
    String RawURI = "rawURI";

    /**
     * Gets the Archive Service fully qualified URI for a given location, regardless of whether
     * the resource exists or not.
     * @param location unique (relative) location for content, e.g. "EXAM/4F/0A/4F0A1245"
     * @return the raw uri e.g. "file:///tmp/EXAM/4F/0A/4F0A1245"
     */
    String getRawUri(String location);

    /**
     * Byte array version of writeResource; intended for small resources; retained for legacy use.
     *
     * @param location unique (relative) location for content, e.g. "EXAM/4F/0A/4F0A1245"
     * @param content content to write
     * @param properties optional content properties to store
     */
    void writeResource(String location, byte[] content, Properties properties);

    /**
     * Write the resource using the given location as the unique id.
     * Store the resource properties if provided. As a convention, property keys look
     * like HTTP headers, for example "Content-Type".
     *
     * @param location unique (relative) location for content, e.g. "EXAM/4F/0A/4F0A1245"
     * @param is content stream to write
     * @param properties optional content properties to store
     */
    void writeResource(String location, InputStream is, Properties properties);

    /**
     * Read a resource identified by the unique location.
     *
     * @param location unique (relative) location for content, e.g. "EXAM/4F/0A/4F0A1245"
     * @return content
     * @throws IllegalArgumentException if location does not exist
     */
    byte[] readResource(String location);

    /**
     * Read a resource identified by the unique location.
     *
     * @param location unique (relative) location for content, e.g. "EXAM/4F/0A/4F0A1245"
     * @return a content stream
     * @throws IllegalArgumentException is location does not exist
     */
    InputStream openResource(String location);

    /**
     * Read the properties for the given resource location.
     *
     * @param location unique (relative) location for content
     * @return content properties, may be empty, won't be null
     * @throws IllegalArgumentException if location does not exist
     */
    Properties readProperties(String location);

    /**
     * Write the properties for the given resource location.  Any existing properties will
     * be carried forward or overwritten.
     *
     * @param location unique (relative) location for content
     * @param properties the properties to append to the existing properties
     * @throws IllegalArgumentException if location does not exist
     */
    void writeProperties(String location, Properties properties);

    /**
     * Permanently delete the resource(s) at the given location.
     * There is no support for wildcards but deleting a partial location will delete all
     * the resources at and "below" the location.
     *
     * @param location location for resource, either a single resource, e.g. "EXAM/4F/0A/4F0A1245"
     *                 or a set of resources with a common location, e.g. "EXAM/4F"
     */
    void delete(String location);

    /**
     * Return whether a resource exists for the given location.
     * Note that only real resources "exists", a partial location doesn't exist (even if
     * it has an underlying physical representation like a folder). For example,<pre>
     * exists("EXAM/4F/0A/4F0A1245") == True
     * exists("EXAM/4F/0A") == False
     * </pre>
     *
     * @param location unique (relative) location for content
     * @return true if the content exists
     */
    boolean exists(String location);

}
