package org.opentestsystem.rdw.archive;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.internal.StaticCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.PropertyResolver;


/**
 * Archive Service Facade to create the appropriate service per tenant
 * expect a valid archiveProperties
 * Create a @S3ArchiveService or @LocalArchiveService
 * create archiveServiceFacade =  new ArchiveServiceFacade()
 *        archiveServiceFacade.createArchiveService(archiveProperties)
 * archiveProperties will contain type of archive service to create and the tenant specific info
 */
@Configuration
public class ArchiveServiceFacade {

    @Bean
    public ArchiveService createArchiveService(ArchiveProperties archiveProperties) {
        validateArchiveProperties(archiveProperties);

        if (archiveProperties.getArchiveAwsProperties() != null ) {
            return createS3ArchiveService(archiveProperties.getArchiveAwsProperties());
        } else if (LocalArchiveService.validRoot(archiveProperties.getArchiveFileProperties().getRoot())) {
            return new LocalArchiveService(archiveProperties.getArchiveFileProperties().getRoot());
        }
        throw new RuntimeException("Invalid ArchiveService requested");
    }

    // allows for amazons3 client to be mocked for testing
    private ArchiveService createS3ArchiveService(ArchiveAwsProperties archiveAwsProperties) {
        RelaxedPropertyResolver resolver;
        PropertyResolver propertyResolver;
        AmazonS3 amazonS3;
        // create amazons3 client
        final AmazonS3ClientBuilder builder = AmazonS3ClientBuilder.standard();
        /*resolver = new RelaxedPropertyResolver(propertyResolver,  "cloud.aws.credentials.");
        builder.setCredentials(new StaticCredentialsProvider(new BasicAWSCredentials(
                resolver.getRequiredProperty("access-key"),
                resolver.getRequiredProperty("secret-key"))));*/

        builder.setCredentials(new StaticCredentialsProvider(new BasicAWSCredentials(
                archiveAwsProperties.getAccessKey(), archiveAwsProperties.getSecretKey())));
        // TODO - allow cloud.aws.region.auto to be true?
        builder.setRegion(archiveAwsProperties.getRegion());
        final String sse = archiveAwsProperties.getSse();

        amazonS3 = builder.build();
        return new S3ArchiveService(amazonS3, archiveAwsProperties);
    }

    // Must have one of the archiveProperties set, but cannot have both set at the same time
    private void validateArchiveProperties(ArchiveProperties archiveProperties) {
        if (((archiveProperties.getArchiveFileProperties() == null) && (archiveProperties.getArchiveAwsProperties() == null))
                ||
                ((archiveProperties.getArchiveFileProperties() != null) && (archiveProperties.getArchiveAwsProperties() != null))) {
            throw new RuntimeException("Invalid ArchiveService requested");
        }
    }
}
