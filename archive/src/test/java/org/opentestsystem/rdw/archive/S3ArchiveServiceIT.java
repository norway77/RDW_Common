package org.opentestsystem.rdw.archive;

import com.amazonaws.services.s3.Headers;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.context.annotation.Import;
import org.springframework.core.env.Environment;
import org.springframework.core.env.PropertyResolver;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Properties;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.util.StreamUtils.copyToByteArray;

/**
 * This approach isn't very flexible but it allows CI to run this ...<br>
 * This test will run only if the system property test-archive.root is set to s3://rdw-ci-archive.
 * Additionally, AWS credentials must be specified:<ul>
 *     <li>test-archive.cloud.aws.credentials.accessKey</li>
 *     <li>test-archive.cloud.aws.credentials.secretKey</li>
 * </ul>
 * For example,<pre>
 * java -Dtest-archive.root=s3://rdw-ci-archive \
 *      -Dtest-archive.cloud.aws.credentials.accessKey=MyAccessKey \
 *      -Dtest-archive.cloud.aws.credentials.secretKey=MySecretKey
 * </pre>
 *
 * TODO Fix
 */
@RunWith(SpringRunner.class)
public class S3ArchiveServiceIT extends ArchivePropertiesUtils {

    private String root;
    private ArchiveService service;
    private ArchiveProperties archiveProperties;

    @Before
    public void createArchiveService() {
        archiveProperties = createArchiveProperties();

        service = new ArchiveServiceFacade().createArchiveService(archiveProperties);
        root = archiveProperties.getArchiveAwsProperties().getBucket();
    }

    @After
    public void cleanup() {
        try {
            service.delete("TEST");
        } catch(final Exception ignored) {
        }
    }

    private ArchiveProperties createArchiveProperties() {
        ArchiveAwsProperties archiveAwsProperties = getArchiveAwsProperties();
        archiveAwsProperties.setBucket("s3://rdw-ci-archive");
        archiveAwsProperties.setRegion("us-west-2");
        archiveAwsProperties.setSecretKey("");
        archiveAwsProperties.setAccessKey("");
        return new ArchivePropertiesImpl(null, archiveAwsProperties);
    }

    @Test
    public void itShouldWriteAndReadContent() {
        final byte[] content = "TestyMcTestFace".getBytes(UTF_8);
        service.writeResource("TEST/test", content, null);
        assertThat(service.exists("TEST/test")).isTrue();
        assertThat(service.readResource("TEST/test")).isEqualTo(content);
        final Properties readProperties = service.readProperties("TEST/test");
        assertThat(readProperties).hasSize(3);
        assertThat(readProperties.get(Headers.CONTENT_LENGTH)).isEqualTo(15L);
        assertThat(readProperties.getProperty(Headers.CONTENT_TYPE)).isEqualTo("application/octet-stream");
        assertThat(readProperties.getProperty(ArchiveService.RawURI)).isEqualTo(root + "/TEST/test");
    }

    @Test
    public void itShouldWriteAndReadContentInLocation() {
        final byte[] content = "TestyMcTestFace".getBytes(UTF_8);
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("message", "hi");

        service.writeResource("TEST/f1/f2/test", content, properties);
        assertThat(service.readResource("TEST/f1/f2/test")).isEqualTo(content);

        final Properties readProperties = service.readProperties("TEST/f1/f2/test");
        assertThat(readProperties).hasSize(4);
        assertThat(readProperties.get(Headers.CONTENT_LENGTH)).isEqualTo(15L);
        assertThat(readProperties.getProperty(Headers.CONTENT_TYPE)).isEqualTo("text/plain");
        assertThat(readProperties.getProperty("message")).isEqualTo("hi");
        assertThat(readProperties.getProperty(ArchiveService.RawURI)).isEqualTo(root + "/TEST/f1/f2/test");
    }

    @Test
    public void itShouldWriteNewPropertiesAndPersistOldProperties() {
        final String location = "TEST/test";
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("user-data", "hello-world");

        final byte[] content = "TestyMcTestFace".getBytes(UTF_8);
        service.writeResource(location, content, properties);

        final Properties newProperties = new Properties();
        newProperties.setProperty("content-type", "text/csv");

        service.writeProperties(location, newProperties);
        final Properties actual = service.readProperties(location);

        assertThat(actual.getProperty(Headers.CONTENT_TYPE)).isEqualTo("text/csv");
        assertThat(actual.getProperty("user-data")).isEqualTo("hello-world");
        assertThat(actual.get(Headers.CONTENT_LENGTH)).isEqualTo(15L);
    }

    @Test
    public void itShouldWritePropertiesWhenNoneExist() {
        final String location = "TEST/test";

        final byte[] content = "TestyMcTestFace".getBytes(UTF_8);
        service.writeResource(location, content, null);

        final Properties newProperties = new Properties();
        newProperties.setProperty("content-type", "text/csv");

        service.writeProperties(location, newProperties);
        final Properties actual = service.readProperties(location);

        assertThat(actual.getProperty(Headers.CONTENT_TYPE)).isEqualTo("text/csv");
        assertThat(actual.get(Headers.CONTENT_LENGTH)).isEqualTo(15L);
    }

    @Test
    public void itShouldWriteAndReadContentUsingStreams() throws Exception {
        final byte[] srcContent = "TestyMcTestFace".getBytes(UTF_8);

        try (final InputStream writeStream = new ByteArrayInputStream(srcContent)) {
            service.writeResource("TEST/f1/f2/test", writeStream, null);

            try (final InputStream readStream =  service.openResource("TEST/f1/f2/test")) {
                final byte[] readContent = copyToByteArray(readStream);
                assertThat(readContent).isEqualTo(srcContent);
            }
        }
    }

    @Test
    public void itShouldReturnExists() {
        service.writeResource("TEST/f1/f2/testExists", "TestExists".getBytes(UTF_8), null);
        assertThat(service.exists("TEST/f1/f2/testExists")).isTrue();
        assertThat(service.exists("TEST/f1/f2/test123")).isFalse();
        assertThat(service.exists("TEST/f1/f2")).isFalse();
        assertThat(service.exists("TEST/f1/")).isFalse();
        assertThat(service.exists("TEST/")).isFalse();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToReadAnUnknownLocation() {
        service.readResource("TEST/f1/f2/test123");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToReadAPartialLocation() {
        final byte[] content = "TestyMcTestFace".getBytes(UTF_8);
        service.writeResource("TEST/f1/f2/test", content, null);
        assertThat(service.readResource("TEST/f1/f2/test")).isEqualTo(content);
        service.readResource("TEST/f1/f2");
    }

    @Test
    public void itShouldDelete() {
        service.writeResource("TEST/f1/f2/test1", "test1".getBytes(UTF_8), null);
        service.writeResource("TEST/f1/f2/test2", "test2".getBytes(UTF_8), null);
        service.writeResource("TEST/f1/f2/test3", "test3".getBytes(UTF_8), null);

        service.delete("TEST/f1/f2/test1");
        assertThat(service.exists("TEST/f1/f2/test1")).isFalse();
        assertThat(service.exists("TEST/f1/f2/test2")).isTrue();
        assertThat(service.exists("TEST/f1/f2/test3")).isTrue();

        service.delete("TEST/f1/f2");
        assertThat(service.exists("TEST/f1/f2/test2")).isFalse();
        assertThat(service.exists("TEST/f1/f2/test3")).isFalse();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToDeleteUnknownLocation() {
        service.delete("TEST/f1/f2");
    }

    @Test
    public void itShouldDiscardNonAsciiObjectMetadata() {
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/csv; charset=utf-8");
        properties.setProperty("user-data", "chinese characters 演示 第1组");

        service.writeResource("TEST/f1/f2/demo 演示.csv", "Katz 第1组".getBytes(UTF_8), properties);

        final Properties read = service.readProperties("TEST/f1/f2/demo 演示.csv");
        assertThat(read.getProperty("Content-Type")).isEqualTo("text/csv; charset=utf-8");
        assertThat(read.getProperty("user-data")).isNull();
    }
}